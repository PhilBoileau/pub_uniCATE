
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # 01. Generate Random Samples From Populations
> ################################################################################
> 
> # load the required libraries and set future options
> library(here)
here() starts at /gstore/home/boileap2/HD-biomarker-discovery/simulations
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.5     ✔ dplyr   1.0.7
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   2.0.1     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(future)
> library(furrr)
> options(future.globals.maxSize = 4.5 * 1024^3)
> 
> # set the seed
> set.seed(85135)
> 
> # set the future plan
> plan(multicore, workers = 20)
> 
> # set the number samples and the sample sizes
> n_samp <- 200
> sizes <- c(125, 250, 500)
> 
> # load the population data and create sample tables
> kinked <- readRDS(
+   here("realistic-continuous", "data", "population-data", "kinked-pop.Rds")
+ )
> kinked_samples <- map_dfr(
+   sizes,
+   function(size){
+     seq_len(n_samp) %>%
+       future_map_dfr(
+         function(idx) {
+           samp_row <- tibble_row(
+             dgp = "kinked",
+             sim_idx = idx,
+             size = size,
+             p = 500,
+             sample = list(
+               tibble(sample_n(kinked, size = size, replace = FALSE))
+             )
+           )
+           return(samp_row)
+         },
+         .options = furrr_options(seed = TRUE)
+       )
+   }
+ )
> rm(kinked)
> 
> linear_asym_ln_main <- readRDS(
+   here(
+     "realistic-continuous", "data", "population-data",
+     "linear-asym-ln-main-pop.Rds"
+   )
+ )
> linear_samples <- map_dfr(
+   sizes,
+   function(size){
+     seq_len(n_samp) %>%
+       future_map_dfr(
+         function(idx) {
+           samp_row <- tibble_row(
+             dgp = "linear_asym_ln_main",
+             sim_idx = idx,
+             size = size,
+             p = 500,
+             sample = list(
+               tibble(
+                 sample_n(linear_asym_ln_main, size = size, replace = FALSE)
+               )
+             )
+           )
+           return(samp_row)
+         },
+         .options = furrr_options(seed = TRUE)
+       )
+   }
+ )
> rm(linear_asym_ln_main)
> 
> linear_asym_nl_main <- readRDS(
+   here(
+     "realistic-continuous", "data", "population-data",
+     "linear-asym-nl-main-pop.Rds"
+   )
+ )
> nonlinear_samples <- map_dfr(
+   sizes,
+   function(size){
+     seq_len(n_samp) %>%
+       future_map_dfr(
+         function(idx) {
+           samp_row <- tibble_row(
+             dgp = "linear_asym_nl_main",
+             sim_idx = idx,
+             size = size,
+             p = 500,
+             sample = list(
+               tibble(
+                 sample_n(linear_asym_nl_main, size = size, replace = FALSE)
+               )
+             )
+           )
+           return(samp_row)
+         },
+         .options = furrr_options(seed = TRUE)
+       )
+   }
+ )
> rm(linear_asym_nl_main)
> 
> # save the random samples to the appropriate directory
> saveRDS(
+   bind_rows(kinked_samples, linear_samples, nonlinear_samples),
+   file = here("realistic-continuous", "data", "sample-data", "sample-tbls.Rds")
+ )
> 
> proc.time()
   user  system elapsed 
230.519 152.710 153.849 
